services:
    redis:
        image: redis:latest
        container_name: redis
        restart: always
        ports:
            - "6379:6379"

    qdrant:
        image: qdrant/qdrant:latest
        container_name: qdrant
        restart: always
        ports:
            - "6333:6333"
            - "6334:6334"

    postgres:
        image: postgres:latest
        container_name: postgres
        restart: always
        environment:
            POSTGRES_USER: root
            POSTGRES_PASSWORD: 123456
            POSTGRES_DB: db
        ports:
            - "5432:5432"
        volumes:
            - ./postgres-data:/var/lib/postgresql/data

    minio:
        image: minio/minio
        container_name: minio
        restart: always
        ports:
            - "9000:9000"
            - "9001:9001"
        environment:
            MINIO_ROOT_USER: root
            MINIO_ROOT_PASSWORD: 12345678
        command: server --console-address ":9001" /data

    celery:
        build:
            context: ./backend
            dockerfile: Dockerfile
            args:
                VERSION: 3.12
        env_file:
            - .env.production
        container_name: celery
        restart: always
        depends_on:
            - redis
        command: celery -A src worker -E --loglevel=info

    elastic-search:
        image: elasticsearch:8.8.0
        container_name: elastic-search
        restart: always
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - logger.level=error
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        ports:
            - "9200:9200"
            - "9300:9300"

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
            args:
                VERSION: 3.12
        env_file:
            - .env.production
        container_name: backend
        restart: always
        ports:
            - "8000:8000"
        depends_on:
            - postgres
            - qdrant
            - minio
            - redis
            - elastic-search
            - celery
        command: ["python", "app.py"]
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000"]
            interval: 30s
            timeout: 10s
            retries: 5

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
            args:
                NODE_VERSION: 22
        container_name: frontend
        environment:
            NEXT_PUBLIC_BASE_API_URL: http://backend:8000
        restart: always
        ports:
            - "3000:3000"
        depends_on:
            - backend
